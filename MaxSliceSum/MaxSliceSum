// A non-empty array A consisting of N integers is given. 
// A pair of integers (P, Q), such that 0 ≤ P ≤ Q < N, is called a slice of array A. 
// The sum of a slice (P, Q) is the total of A[P] + A[P+1] + ... + A[Q].
// 
// Write a function:
// 
// int solution(int A[], int N);
// 
// that, given an array A consisting of N integers, returns the maximum sum of any slice of A.
// 
// For example, given array A such that:
// 
// A[0] = 3  A[1] = 2  A[2] = -6
// A[3] = 4  A[4] = 0
// the function should return 5 because:
// 
// (3, 4) is a slice of A that has sum 4,
// (2, 2) is a slice of A that has sum −6,
// (0, 1) is a slice of A that has sum 5,
// no other slice of A has sum greater than (0, 1).

int solution(int A[], int N)
{
    int maxslice = 0;
    int i = 0;
    int slice = 0;
    int min = A[i];
    int max = A[i];

    // iterate array
    while (i < N)
    {
        // save new starting slice
        if (!min)
        {
            min = A[i];
        }
        // save new nextslice
        else if (min)
        {
            min = min + A[i]
        }
        // save possible new maxslice
        if (min > maxslice)
            maxslice = min;
        i++;
    }
    return maxslice;

}
